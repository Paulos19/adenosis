// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Role {
  USER
  SELLER
  ADMIN
}

enum BookCondition {
  NEW
  USED_LIKE_NEW
  USED_GOOD
  USED_FAIR
}

enum BookStatus {
  PUBLISHED
  UNPUBLISHED
  PENDING_APPROVAL
}

enum ReservationStatus {
  PENDING     // Cliente demonstrou interesse, aguardando ação do vendedor
  CONFIRMED   // Vendedor confirmou a venda/disponibilidade, aguardando cliente
  COMPLETED   // Cliente confirmou entrega e/ou avaliou
  CANCELLED   // Reserva/Venda cancelada (pelo vendedor ou cliente)
  // EXPIRED  // Se você implementar expiração de reserva (opcional)
}


// AUTHENTICATION MODELS (for NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// APPLICATION MODELS
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?   // URL para avatar
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sellerProfile   SellerProfile?
  accounts        Account[]
  sessions        Session[]
  wishlist        WishlistItem[]
  ratingsGiven    SellerRating[]   @relation("RatingsGivenByUsers")
  reservations    Reservation[]    @relation("UserReservations")
}

model SellerProfile {
  id                String   @id @default(cuid())
  storeName         String   @unique 
  storeHandle       String?  @unique 
  storeDescription  String?  @db.Text
  whatsappNumber    String   
  storeLogoUrl      String?  
  storeBannerUrl    String?  
  averageRating     Float?   
  totalRatings      Int      @default(0) 
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  books             Book[]
  ratingsReceived   SellerRating[]   @relation("RatingsForSeller")
  reservations      Reservation[]    @relation("SellerReservations")
}

model Category {
  id        String @id @default(cuid())
  name      String @unique
  slug      String @unique 
  // imageUrl  String? 
  books     Book[]
}

model Book {
  id              String        @id @default(cuid())
  title           String
  author          String
  description     String        @db.Text
  price           Float
  coverImageUrl   String
  condition       BookCondition
  status          BookStatus    @default(PUBLISHED)
  stock           Int           @default(1)
  isbn            String?       @unique 
  publisher       String?
  publicationYear Int?
  language        String?
  pages           Int?
  tags            String[]      
  viewCount       Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  sellerId String
  seller   SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  wishlistItems   WishlistItem[]
  reservations    Reservation[]

  @@index([title]) 
  @@index([author])
  @@index([categoryId])
  @@index([sellerId])
  @@index([status])
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}

model SellerRating {
  id        String   @id @default(cuid())
  rating    Int      
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerProfileId String
  sellerProfile   SellerProfile @relation("RatingsForSeller", fields: [sellerProfileId], references: [id], onDelete: Cascade)

  ratedById String 
  ratedBy   User   @relation("RatingsGivenByUsers", fields: [ratedById], references: [id], onDelete: Cascade)

  @@unique([sellerProfileId, ratedById])
  @@index([sellerProfileId])
  @@index([ratedById])
}

model Reservation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  userId String // Cliente
  user   User   @relation("UserReservations", fields: [userId], references: [id], onDelete: Cascade)

  sellerProfileId String // Vendedor
  sellerProfile   SellerProfile @relation("SellerReservations", fields: [sellerProfileId], references: [id], onDelete: Cascade)

  status         ReservationStatus @default(PENDING)
  
  customerConfirmationToken         String?   @unique 
  customerConfirmationTokenExpires  DateTime? 
  deliveryConfirmedAt             DateTime? 
  // sellerNotes                     String?   @db.Text 

  @@index([userId])
  @@index([bookId])
  @@index([sellerProfileId])
  @@index([status])
}
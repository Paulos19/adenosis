generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// ENUMS
enum Role {
  USER
  SELLER
  ADMIN
}

enum BookCondition {
  NEW
  USED_LIKE_NEW
  USED_GOOD
  USED_FAIR
}

// AUTHENTICATION MODELS (for NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// APPLICATION MODELS
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sellerProfile SellerProfile?
  accounts      Account[]
  sessions      Session[]
  wishlist      WishlistItem[]
}

model SellerProfile {
  id               String   @id @default(cuid())
  storeName        String
  storeDescription String?
  whatsappNumber   String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  books Book[]
}

model Category {
  id   String @id @default(cuid())
  name String @unique

  books Book[]
}

model Book {
  id              String        @id @default(cuid())
  title           String
  author          String
  description     String        @db.Text
  price           Float
  coverImageUrl   String
  condition       BookCondition
  stock           Int           @default(1)
  isbn            String?
  publisher       String?
  publicationYear Int?
  language        String?
  pages           Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  sellerId String
  seller   SellerProfile @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  wishlistItems WishlistItem[]
}

model WishlistItem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId])
}